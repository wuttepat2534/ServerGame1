const { response } = require("express");
const mysql = require('mysql2') //npm install mysql2
const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const os = require('os');
require('dotenv').config()
const app = express();

const connection = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD
});

//EBet-------------------------------------------------------------------------------------------------------------------------------------------------------------------

http://localhost:5000/post/EBet/registerOrLogin  
exports.registerOrLoginEBet = async (req, res) => {
    const ip = req.body.ip;
    const password = req.body.password;
    const usernames = req.body.username;
    const currency = req.body.currency;
    const accessToken = req.body.accessToken;
    const event = req.body.event;
    const timestamp = req.body.timestamp;
    const sessionToken = req.body.sessionToken;
    const seqNo = req.body.seqNo;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    accessToken: accessToken,
                    username: usernames,
                    sessionToken: sessionToken,
                    currency: currency,
                    status: 200,
                    event: event,
                    seqNo: seqNo,
                    nickname: "User nickname, randomly generated by default"
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/EBet/syncCredit 
exports.GetBalanceEBet = async (req, res) => {
    const tableType = req.body.tableType;
    const timestampMillis = req.body.timestampMillis;
    const event = req.body.event;
    const currency = req.body.currency;
    const usernameGame = req.body.username;
    const timestamp = req.body.timestamp;
    const sessionToken = req.body.username;
    const seqNo = req.body.seqNo;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    username: usernameGame,
                    money: balanceUser,
                    currency: currency,
                    status: 200,
                    event: event,
                    seqNo: seqNo,
                    timestamp: timestamp
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/EBet/increaseCredit 
exports.IncreaseCreditEBet = async (req, res) => {
    const usernameGame = req.body.username;
    const money = req.body.money;
    const type = req.body.type;
    const currency = req.body.currency;
    const seqNo = req.body.seqNo;
    const detail = req.body.detail;
    const event = req.body.event;
    const timestamp = req.body.timestamp;
    const sessionToken = req.body.username;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                let balanceNow;
                if (type === 1) {
                    balanceNow = balanceUser - money;
                } else if (type === 2) {
                    balanceNow = balanceUser - money;
                } else if (type === 37) {
                    balanceNow = balanceUser - money;
                } else {
                    balanceNow = balanceUser + money;
                }
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            username: usernameGame,
                            money: balanceUser,
                            moneyBefore: balanceNow,
                            status: 200,
                            event: event,
                            seqNo: seqNo,
                            timestamp: timestamp
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/EBet/queryIncreaseCreditRecord 
exports.IncreaseCreditRecordsEBet = async (req, res) => {
    const usernameGame = req.body.username;
    const querySeqNo = req.body.querySeqNo;
    const roundCode = req.body.roundCode;
    const seqNo = req.body.seqNo;
    const event = req.body.event;
    const timestamp = req.body.timestamp;
    const sessionToken = req.body.username;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                let balanceNow = balanceNow = balanceUser + 100;
                res.status(201).json({
                    username: usernameGame,
                    status: 200,
                    event: event,
                    seqNo: seqNo,
                    timestamp: timestamp,
                    creditRecord: [
                        {
                            querySeqNo: querySeqNo,
                            type: 1,
                            username: usernameGame,
                            roundCode: roundCode,
                            status: 200,
                            creditTime: timestamp,
                            moneyBefore: balanceUser,
                            moneyAfter: 1000.01,
                            money: 100
                        }
                    ],
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/EBet/refundSingleWallet 
exports.SingleWalletEBet = async (req, res) => {
    const usernameGame = req.body.username;
    const roundCode = req.body.roundCode;
    const seqNo = req.body.seqNo;
    const event = req.body.event;
    const timestamp = req.body.timestamp;
    const sessionToken = req.body.username;
    const refundList = req.body.refundList;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                let balanceNow = balanceNow = balanceUser + refundList[0].refundMoney;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            username: usernameGame,
                            moneyBefore: balanceUser,
                            moneyAfter: balanceNow,
                            event: event,
                            seqNo: seqNo,
                            timestamp: timestamp,
                            refundMoney: refundList[0].refundMoney,
                            refundList: [
                                {
                                    refundSeqNo: refundList[0].refundSeqNo,
                                    status: 200
                                }
                            ]
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/EBet/autoBatchRefund 
exports.BatchRefundEBet = async (req, res) => {
    const lastStartProcessTime = req.body.lastStartProcessTime;
    const refundThreshold = req.body.refundThreshold;
    const currency = req.body.currency;
    const seqNo = req.body.seqNo;
    const event = req.body.event;
    const timestamp = req.body.timestamp;
    const sessionToken = req.body.sessionToken;
    const batchRefundList = req.body.batchRefundList;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);

                res.status(201).json({
                    status: 200,
                    timestamp: timestamp,
                    event: event,
                    seqNo: seqNo,
                    refundResultList: [
                        {
                            refundTotalMoney: batchRefundList[0].refundMoney,
                            roundCode: batchRefundList[0].roundCode,
                            username: batchRefundList[0].username,
                            sucRefundSeqNoList: [
                                {
                                    status: 200,
                                    seqNo: batchRefundList[0].seqNo
                                }
                            ]
                        }
                    ]
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

// bigGame -------------------------------------------------------------------------------------------------------------------------------------------------------------------

http://localhost:5000/post/bigGame 
exports.IntegrationAPIsBigGaming = async (req, res) => {
    const id = req.body.id;
    const method = req.body.method;
    const params = req.body.params;
    const jsonrpc = req.body.jsonrpc;
    username = 'member001';

    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                if (method === "open.operator.user.balance") {
                    res.status(201).json({
                        id: id,
                        result: balanceUser,
                        error: null,
                        jsonrpc: jsonrpc,
                    });
                } else if (method === "open.operator.user.balance") {
                    const betPlay = params.orders[0].amount;
                    const balanceNow = balanceUser + betPlay;
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${betPlay}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                id: id,
                                result: {
                                    userId: params.userId,
                                    availableAmount: balanceNow,
                                    orderResult: "1",
                                    tranId: null
                                },
                                error: null,
                                jsonrpc: jsonrpc,
                            });
                        }
                    });
                } else if (method === "open.operator.calc.transfer") {
                    const betPlay = params.orders[0].amount;
                    const balanceNow = balanceUser - betPlay;
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${betPlay}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                id: id,
                                result: {
                                    userId: params.userId,
                                    availableAmount: balanceNow,
                                    orderResult: "1",
                                    tranId: null
                                },
                                error: null,
                                jsonrpc: jsonrpc,
                            });
                        }
                    });
                }
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

// SA -------------------------------------------------------------------------------------------------------------------------------------------------------------------

http://localhost:5000/post/SA/GetUserBalance
exports.GetBalanceSA = async (req, res) => {
    const usernameGame = req.body.username;
    const currency = req.body.currency;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    username: usernameGame,
                    currency: currency,
                    amount: balanceUser,
                    error: 0,
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/SA/PlaceBet
exports.PlaceBetSA = async (req, res) => {
    const usernameGame = req.body.username;
    const currency = req.body.currency;
    const amount = req.body.amount;
    const txnid = req.body.txnid;
    const timestamp = req.body.timestamp;
    const ip = req.body.ip;
    const gametype = req.body.gametype;
    const platform = req.body.platform;
    const hostid = req.body.platform;
    const gameid = req.body.platform;
    const betdetails = req.body.platform;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const betPlay = betdetails.details[0].amount;
                const balanceNow = balanceUser - betPlay;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${betPlay}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            username: usernameGame,
                            currency: currency,
                            amount: balanceNow,
                            error: 0,
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/SA/PlayerWin
exports.PlayerWinSA = async (req, res) => {
    const usernameGame = req.body.username;
    const currency = req.body.currency;
    const amount = req.body.amount;
    const gameid = req.body.gameid;
    const timestamp = req.body.timestamp;
    const txnid = req.body.txnid;
    const hostid = req.body.platform;
    const gametype = req.body.gametype;
    const Payouttime = req.body.Payouttime;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const betPlay = parseFloat(amount);
                const balanceNow = balanceUser + betPlay;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            username: usernameGame,
                            currency: currency,
                            amount: balanceNow,
                            error: 0,
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/SA/PlayerLost
exports.PlayerLostSA = async (req, res) => {
    const usernameGame = req.body.username;
    const currency = req.body.currency;
    const gameid = req.body.gameid;
    const timestamp = req.body.timestamp;
    const txnid = req.body.txnid;
    const hostid = req.body.platform;
    const gametype = req.body.gametype;
    const Payouttime = req.body.Payouttime;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    username: usernameGame,
                    currency: currency,
                    amount: balanceUser,
                    error: 0,
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/SA/PlaceBetCancel
exports.PlaceBetCancelSA = async (req, res) => {
    const amount = req.body.amount;
    const currency = req.body.currency;
    const gamecancel = req.body.gamecancel;
    const gametype = req.body.gametype;
    const gameid = req.body.gameid;
    const hostid = req.body.hostid;
    const timestamp = req.body.timestamp;
    const txn_reverse_id = req.body.txn_reverse_id;
    const txnid = req.body.txnid;
    const usernames = req.body.username;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const betPlay = parseFloat(amount);
                const balanceNow = balanceUser + betPlay;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            username: usernames,
                            currency: currency,
                            amount: balanceNow,
                            error: 0,
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

//Pragmatic Play -------------------------------------------------------------------------------------------------------------------------------------------------------------------

http://localhost:5000/post/Play/authenticate.html
exports.AuthenticatePlay = async (req, res) => {
    const providerId = req.body.providerId;
    const hash = req.body.hash;
    const token = req.body.token;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    userId: "victest2",
                    currency: "THB",
                    cash: balanceUser,
                    bonus: 90.99,
                    country: "TH",
                    betLimits: {
                        defaultBet: 0.10,
                        minBet: 0.02,
                        maxBet: 10.00,
                        minTotalBet: 0.50,
                        maxTotalBet: 250.00
                    },
                    error: 0,
                    description: "Success"
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Play/balance.html
exports.GetBalancePlay = async (req, res) => {
    const providerId = req.body.providerId;
    const userId = req.body.userId;
    const hash = req.body.hash;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    currency: "THB",
                    cash: balanceUser,
                    bonus: 99.99,
                    error: 0,
                    description: "Success"
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Play/bet.html
exports.BetPlay = async (req, res) => {
    const roundDetails = req.body.providerId;
    const reference = req.body.userId;
    const gameId = req.body.hash;
    const amount = req.body.amount;
    const providerId = req.body.userId;
    const userId = req.body.hash;
    const roundId = req.body.providerId;
    const hash = req.body.userId;
    const timestamp = req.body.hash;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const betPlay = parseFloat(amount);
                const balanceNow = balanceUser - betPlay;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${betPlay}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            transactionId: 1482429190474,
                            currency: "THB",
                            cash: balanceNow,
                            bonus: 99.99,
                            usedPromo: 0,
                            error: 0,
                            description: "Success"
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Play/result.html
exports.ResultPlay = async (req, res) => {
    const roundDetails = req.body.providerId;
    const reference = req.body.userId;
    const gameId = req.body.hash;
    const amount = req.body.amount;
    const providerId = req.body.userId;
    const userId = req.body.hash;
    const roundId = req.body.providerId;
    const platform = req.body.platform;
    const hash = req.body.userId;
    const timestamp = req.body.hash;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const betPlay = parseFloat(amount);
                const balanceNow = balanceUser + betPlay;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            transactionId: 1482429190474,
                            currency: "THB",
                            cash: balanceNow,
                            bonus: 99.99,
                            error: 0,
                            description: "Success"
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Play/endRound.html
exports.EndRoundPlay = async (req, res) => {
    const gameId = req.body.gameId;
    const providerId = req.body.providerId;
    const userId = req.body.userId;
    const roundId = req.body.roundId;
    const platform = req.body.platform;
    const hash = req.body.hash;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    cash: balanceUser,
                    bonus: 99.99,
                    error: 0,
                    description: "Success"
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Play/refund.html
exports.RefundPlay = async (req, res) => {
    const reference = req.body.reference;
    const providerId = req.body.providerId;
    const userId = req.body.userId;
    const platform = req.body.platform;
    const hash = req.body.hash;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    error: 0,
                    description: "Success",
                    transactionId: "f47e5065-412c-40d1-9e4c-f6c248919509"
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Play/bonusWin.html // jackpotWin.html // PromoWin
exports.BonusWinPlay = async (req, res) => {
    const reference = req.body.reference;
    const bonusCode = req.body.bonusCode;
    const amount = req.body.amount;
    const providerId = req.body.userId;
    const userId = req.body.hash;
    const hash = req.body.userId;
    const timestamp = req.body.hash;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const betPlay = parseFloat(amount);
                const balanceNow = balanceUser + betPlay;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            transactionId: 1482429190474,
                            currency: "THB",
                            cash: balanceNow,
                            bonus: 99.99,
                            error: 0,
                            description: "Success"
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

//WM Casino -------------------------------------------------------------------------------------------------------------------------------------------------------------------

http://localhost:5000/post/WM/balance
exports.GetBalanceWM = async (req, res) => {
    const usernames = req.body.username;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    errorCode: 0,
                    result: {
                        balance: balanceUser
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/WM/betPayin
exports.PlaceBetWM = async (req, res) => {
    const usernames = req.body.username;
    const amount = req.body.amount;
    const betId = req.body.betId;
    const roundId = req.body.roundId;
    const gameId = req.body.gameId;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const balanceNow = balanceUser - amount;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${amount}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            errorCode: 0,
                            result: {
                                balance: balanceNow
                            }
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/WM/betPayout
exports.PayoutWM = async (req, res) => {
    const usernames = req.body.username;
    const amount = req.body.amount;
    const betId = req.body.betId;
    const roundId = req.body.roundId;
    const gameId = req.body.gameId;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const balanceNow = balanceUser - amount;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${amount}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            errorCode: 0,
                            result: {
                                balance: balanceNow
                            }
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/WM/refund
exports.RefundWM = async (req, res) => {
    const usernames = req.body.username;
    const amount = req.body.amount;
    const betId = req.body.betId;
    const roundId = req.body.roundId;
    const gameId = req.body.gameId;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const balanceNow = balanceUser + amount;
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${amount}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            errorCode: 0,
                            result: {
                                balance: balanceNow
                            }
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

//Xtreme Gaming -------------------------------------------------------------------------------------------------------------------------------------------------------------------

http://localhost:5000/post/Xtreme/user/balance
exports.GetBalanceXtreme = async (req, res) => {
    const requestId = req.body.requestId;
    const user = req.body.user;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = results[0].credit;
                const balanceString = balanceUser.toString();
                res.status(201).json({
                    requestId: requestId,
                    status: "ok",
                    user: user,
                    currency: "THB",
                    balance: balanceString
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Xtreme/transaction/bet
exports.PlaceBetXtreme = async (req, res) => {
    const requestId = req.body.requestId;
    const user = req.body.user;
    const currency = req.body.currency;
    const amount = req.body.amount;
    const gameType = req.body.gameType;
    const table = req.body.table;
    const round = req.body.round;
    const run = req.body.run;
    const bet = req.body.bet;
    const betTime = req.body.betTime;
    const transactionId = req.body.transactionId;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const balanceNow = balanceUser - amount;
                const balanceString = balanceNow.toString();
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${amount}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            requestId: requestId,
                            status: "ok",
                            user: user,
                            currency: currency,
                            balance: balanceString,
                            transactionId: transactionId
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Xtreme/transaction/settle
exports.SettleBetXtreme = async (req, res) => {
    const user = req.body.user;
    const currency = req.body.currency;
    const amount = req.body.amount;
    const wagerId = req.body.wagerId;
    const transactionId = req.body.transactionId;
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                const balanceNow = balanceUser + amount;
                const balanceString = balanceNow.toString();
                const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                connection.query(sql_update, (error, resultsGame) => {
                    if (error) { console.log(error) }
                    else {
                        res.status(201).json({
                            status: "ok",
                            user: user,
                            currency: currency,
                            balance: balanceString,
                        });
                    }
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};

http://localhost:5000/post/Xtreme/transaction/rollback
exports.CancelXtreme = async (req, res) => {
    const requestId = req.body.requestId;
    const user = req.body.user;
    const transactionId = req.body.transactionId;

    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            if (error) { console.log(error) }
            else {
                const balanceUser = parseFloat(results[0].credit);
                res.status(201).json({
                    status: "ok",
                    user: user,
                    currency: currency,
                    balance: balanceUser,
                });
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};


//SexyGaming-------------------------------------------------------------------------------------------------------------------------------------------------------------------

http://localhost:5000/post/SexyGaming
exports.GetBalanceSexyGaming = async (req, res) => {
    const message = req.body.message;
    const parsedMessage = JSON.parse(message);
    const now = new Date();
    const dateTimeNow = now.toISOString();
    username = 'member001';
    let spl = `SELECT credit FROM member WHERE username ='${username}' AND status_delete='N' 
  ORDER BY member_code ASC`;
    try {
        connection.query(spl, (error, results) => {
            const balanceUser = results[0].credit;
            if (error) { console.log(error) }
            else {
                if (parsedMessage.action === "getBalance") {
                    const userId = parsedMessage.userId;
                    const balanceString = balanceUser.toString();
                    res.status(201).json({
                        status: "0000",
                        userId: userId,
                        balance: balanceString,
                        balanceTs: dateTimeNow
                    });
                } else if (parsedMessage.action === "bet") {
                    const betTime =parsedMessage.betTime;
                    const betAmount = parsedMessage.betAmount;
                    const betAmountNumber = parseFloat(betAmount);
                    const balanceNow = balanceUser - betAmountNumber;
                    const balanceString = balanceNow.toString();
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${betAmountNumber}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                status: "0000",
                                balance: balanceString,
                                balanceTs: betTime
                            });
                        }
                    });
                } else if (parsedMessage.action === "cancelBet") {
                    const balanceString = balanceUser.toString();
                    res.status(201).json({
                        status: "0000",
                        balance: balanceString,
                        balanceTs: dateTimeNow
                    });
                } else if (parsedMessage.action === "settle") {
                    const winAmount = parsedMessage.winAmount;
                    const betAmountNumber = parseFloat(winAmount);
                    const balanceNow = balanceUser + betAmountNumber;
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                status: "0000",
                            });
                        }
                    });
                } else if (parsedMessage.action === "unsettle") {
                    const betAmount = parsedMessage.betAmount;
                    const betAmountNumber = parseFloat(betAmount);
                    const balanceNow = balanceUser + betAmountNumber;
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                status: "0000",
                            });
                        }
                    });
                } else if (parsedMessage.action === "voidBet") {
                    const betAmount = parsedMessage.betAmount;
                    const betAmountNumber = parseFloat(betAmount);
                    const balanceNow = balanceUser + betAmountNumber;
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                status: "0000",
                            });
                        }
                    });
                } else if (parsedMessage.action === "voidSettle") {
                    const betAmount = parsedMessage.betAmount;
                    const betAmountNumber = parseFloat(betAmount);
                    const balanceNow = balanceUser + betAmountNumber;
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                status: "0000",
                            });
                        }
                    });
                } else {
                    const txTime = parsedMessage.txTime;
                    const betAmount = parsedMessage.amount;
                    const betAmountNumber = parseFloat(betAmount);
                    const balanceNow = balanceUser + betAmountNumber;
                    const balanceString = balanceNow.toString();
                    const sql_update = `UPDATE member set credit='${balanceNow}',bet_latest='${0}' WHERE username ='${username}'`;
                    connection.query(sql_update, (error, resultsGame) => {
                        if (error) { console.log(error) }
                        else {
                            res.status(201).json({
                                status: "0000",
                                desc: "success",
                                balance: balanceString,
                                balanceTs: txTime
                            });
                        }
                    });
                }
            }
        })
    } catch (err) {
        err.statusCode = 500;
        res.json({ status: "Not Data Request Body." });
    }
};
